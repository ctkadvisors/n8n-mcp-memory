#!/usr/bin/env node

// This is the Docker container version of the bridge script
// It is used by the main Dockerfile and copied to /app/mcp-bridge.js
// This version is optimized for use in the Docker container

import http from 'http';
import { spawn } from 'child_process';
import readline from 'readline';

// Start the n8n-mcp server in the background
console.error('Starting n8n-mcp server...');
const server = spawn('node', ['dist/server.js'], {
  stdio: 'ignore',  // Ignore all stdio - we'll communicate via HTTP only
  detached: false   // Keep the server attached to this process
});

// Give the server a moment to start up
setTimeout(() => {
  console.error('Server started, setting up bridge...');

  // Create readline interface to read from stdin
  const rl = readline.createInterface({
    input: process.stdin
  });

  // Listen for messages from Claude Desktop
  rl.on('line', async (line) => {
    try {
      // Parse the message
      const message = JSON.parse(line);
      console.error(`Received message: ${message.method || 'response'}`);

      // Handle notifications separately
      if (message.method && message.method.startsWith('notifications/')) {
        console.error(`Handling notification: ${message.method}`);
        // For notifications, we don't need to send a response
        // Just forward to the HTTP server and ignore the response
        sendToHttpServer(message).catch(error => {
          console.error(`Error forwarding notification: ${error.message}`);
        });
        return;
      }

      // Forward the message to the HTTP server
      try {
        const response = await sendToHttpServer(message);

        // Send the response back to Claude Desktop
        // This will go to stdout and be filtered by our wrapper script
        console.log(JSON.stringify(response));
      } catch (error) {
        console.error(`Error sending to HTTP server: ${error.message}`);

        // Send error response with proper JSON-RPC format
        console.log(JSON.stringify({
          jsonrpc: '2.0',
          error: {
            code: -32603,
            message: `Internal error: ${error.message}`
          },
          id: message.id || null
        }));
      }
    } catch (error) {
      console.error(`Error parsing message: ${error.message}`);

      // Send error response for parse errors
      console.log(JSON.stringify({
        jsonrpc: '2.0',
        error: {
          code: -32700,
          message: `Parse error: ${error.message}`
        },
        id: null
      }));
    }
  });

  // Handle process termination
  process.on('SIGINT', () => {
    console.error('Received SIGINT, shutting down...');
    server.kill();
    process.exit(0);
  });

  process.on('SIGTERM', () => {
    console.error('Received SIGTERM, shutting down...');
    server.kill();
    process.exit(0);
  });

  // Send initialization success message
  console.error('Bridge ready to process messages');

  // Send a ping to the server to make sure it's ready
  sendToHttpServer({
    jsonrpc: '2.0',
    method: 'ping',
    params: {},
    id: 'ping-1'
  }).then(() => {
    console.error('Server is ready to receive messages');
  }).catch(error => {
    console.error(`Server ping failed: ${error.message}`);
    console.error('Continuing anyway, will retry on actual requests');
  });

}, 5000); // Wait 5 seconds for the server to start

// Function to send messages to the HTTP server
async function sendToHttpServer(message) {
  return new Promise((resolve, reject) => {
    const data = JSON.stringify(message);
    console.error(`Sending to HTTP server: ${data}`);

    const options = {
      hostname: 'localhost',
      port: 3000,
      path: '/mcp',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': data.length,
        'Accept': 'application/json, text/event-stream',
        'X-Session-Id': 'bridge-session'
      }
    };

    const req = http.request(options, (res) => {
      let responseData = '';

      res.on('data', (chunk) => {
        responseData += chunk;
        console.error(`Received chunk: ${chunk}`);
      });

      res.on('end', () => {
        try {
          console.error(`Complete response: ${responseData}`);

          // Handle empty response
          if (!responseData || responseData.trim() === '') {
            console.error('Received empty response from server');

            // For initialization, provide a fallback response
            if (message.method === 'initialize') {
              console.error('Providing fallback initialize response due to empty response');
              resolve({
                jsonrpc: '2.0',
                result: {
                  protocolVersion: '2024-11-05',
                  serverInfo: {
                    name: 'n8n-mcp-bridge',
                    version: '1.0.0'
                  },
                  capabilities: {
                    resources: { listChanged: true },
                    tools: { listChanged: true }
                  }
                },
                id: message.id
              });
              return;
            } else if (message.method && (message.method.startsWith('notifications/') || message.method === 'shutdown')) {
              resolve({ jsonrpc: '2.0', result: null, id: message.id });
              return;
            } else {
              // For other methods, return a generic success response
              resolve({
                jsonrpc: '2.0',
                result: { success: true },
                id: message.id
              });
              return;
            }
          }

          // Try to parse the response as JSON
          let parsedResponse;
          try {
            // First try to parse as a direct JSON response
            parsedResponse = JSON.parse(responseData);
          } catch (e) {
            // If that fails, try to parse as SSE
            try {
              // Parse the SSE response
              const events = responseData.split('\n\n').filter(Boolean);
              if (events.length > 0) {
                const event = events[0];
                const lines = event.split('\n');
                const dataLine = lines.find(line => line.startsWith('data:'));

                if (dataLine) {
                  const data = dataLine.substring(5).trim();
                  parsedResponse = JSON.parse(data);
                } else {
                  throw new Error('No data line found in SSE response');
                }
              } else {
                throw new Error('No events found in SSE response');
              }
            } catch (sseError) {
              console.error(`Failed to parse response as SSE: ${sseError.message}`);

              // If all parsing fails, return a generic success response
              resolve({
                jsonrpc: '2.0',
                result: { success: true, rawResponse: responseData },
                id: message.id
              });
              return;
            }
          }

          // Ensure the response has the required JSON-RPC fields
          if (typeof parsedResponse === 'object' && parsedResponse !== null) {
            if (!parsedResponse.jsonrpc) {
              parsedResponse.jsonrpc = '2.0';
            }

            if (!parsedResponse.id && message.id) {
              parsedResponse.id = message.id;
            }

            if (!parsedResponse.result && !parsedResponse.error) {
              parsedResponse.result = { success: true };
            }
          } else {
            // If the response is not an object, wrap it in a proper JSON-RPC response
            parsedResponse = {
              jsonrpc: '2.0',
              result: parsedResponse,
              id: message.id
            };
          }

          resolve(parsedResponse);
        } catch (error) {
          console.error(`Error parsing response: ${error.message}`);

          // Even if we have an error, return a properly formatted JSON-RPC response
          resolve({
            jsonrpc: '2.0',
            error: {
              code: -32603,
              message: `Error parsing response: ${error.message}`
            },
            id: message.id
          });
        }
      });
    });

    req.on('error', (error) => {
      console.error(`HTTP request error: ${error.message}`);

      // For initialization, provide a fallback response
      if (message.method === 'initialize') {
        console.error('Providing fallback initialize response due to HTTP error');
        resolve({
          jsonrpc: '2.0',
          result: {
            protocolVersion: '2024-11-05',
            serverInfo: {
              name: 'n8n-mcp-bridge',
              version: '1.0.0'
            },
            capabilities: {
              resources: { listChanged: true },
              tools: { listChanged: true }
            }
          },
          id: message.id
        });
      } else {
        reject(error);
      }
    });

    // Set a timeout for the request
    req.setTimeout(5000, () => {
      console.error('HTTP request timeout');

      // For initialization, provide a fallback response
      if (message.method === 'initialize') {
        console.error('Providing fallback initialize response due to timeout');
        resolve({
          jsonrpc: '2.0',
          result: {
            protocolVersion: '2024-11-05',
            serverInfo: {
              name: 'n8n-mcp-bridge',
              version: '1.0.0'
            },
            capabilities: {
              resources: { listChanged: true },
              tools: { listChanged: true }
            }
          },
          id: message.id
        });
      } else {
        reject(new Error('Request timeout'));
      }
    });

    req.write(data);
    req.end();
  });
}
